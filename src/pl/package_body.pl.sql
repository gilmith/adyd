create or replace PACKAGE BODY ADYD_PKG AS

FUNCTION INSERTMODULO(
    V_NOMBRE IN ADYD_MODULOS.TIPO%TYPE
) RETURN NUMBER IS
--en las funciones de paquete no llevan el declare solo si son funciones sueltas
N_ID  number;
BEGIN
    SELECT COUNT(ID) INTO N_ID FROM ADYD_COLECCION WHERE NOMBRE=V_NOMBRE;
    IF(N_ID >=1) THEN
        RETURN 0;
    ELSE
        SELECT COUNT(ID) INTO N_ID FROM ADYD_MODULOS WHERE TIPO=V_NOMBRE;
        if (N_ID>=1) then
            sys.dbms_output.put_line('el modulo ya existe');
            RETURN 0;
        else
            INSERT INTO ADYD_MODULOS (ID, TIPO) VALUES (ADYD_MODULOS_SEQ.NEXTVAL, V_NOMBRE);
            if(SQL%ROWCOUNT = 1 ) then
                commit;
                N_ID := ADYD_MODULOS_SEQ.CURRVAL;
                return N_ID;
            else
                rollback;
                RETURN 0;
            end if;
        end if;  
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20000, 'MODULO YA INSERTADO');
            RETURN 0;
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20000, 'MODULO YA INSERTADO');
END INSERTMODULO;


PROCEDURE INSERTFILE(
    V_FILE IN ADYD_FILES.NOMBRE%TYPE,
    V_RUTA IN ADYD_FILES.RUTA%TYPE,
    N_TAMANO IN ADYD_FILES.TAMANHO%TYPE,
    V_TSR_ID1 IN ADYD_TSR.TSR_ID1%TYPE,
    V_TSR_ID2 IN ADYD_TSR.TSR_ID2%TYPE,
    V_RUTA_MINI IN ADYD_MINI.PATH%TYPE,
    N_COLECCION_ID IN ADYD_FILES.COLECCION_ID_FK%TYPE,
    N_CODE OUT NUMBER,
    V_MESSAGE OUT VARCHAR ) IS
--AQUI TENGO QUE DEFINIR LOS ID DE SECUENCIA DE CADA TABLA
N_ID_LAST_MODULO NUMBER;
N_ID_NEXT_EXTRA NUMBER;
N_ID_NEXT_MINI NUMBER;
N_ID_FILE NUMBER;
N_ID_MINI NUMBER;
N_TSR1 NUMBER;
N_TSR2 NUMBER;
BEGIN
    SELECT MAX(ID) INTO N_ID_LAST_MODULO FROM ADYD_MODULOS;
    SELECT COUNT(ID) INTO N_ID_FILE FROM ADYD_FILES WHERE NOMBRE=V_FILE;
    -- SELECCION DE PRECONDICIONES
    SELECT COUNT(TSR_ID1) INTO N_TSR1 FROM ADYD_TSR WHERE TSR_ID1=V_TSR_ID1;
    SELECT COUNT(ID) INTO N_ID_MINI FROM ADYD_MINI WHERE PATH=V_RUTA_MINI;
    --CONDICIONES
    IF ((N_ID_FILE >= 1) OR (N_TSR1 >=1) OR (N_ID_MINI >= 1)) THEN
        V_MESSAGE := 'Archivo ya insertado';
        N_CODE := -1;
    ELSE
        --FALTAN PRECONDICIONES!!! METERLAS COMO METODOS!
        SELECT ADYD_EXTRA_SEQ.NEXTVAL INTO N_ID_NEXT_EXTRA FROM DUAL;
        
        SELECT ADYD_MINI_SEQ.NEXTVAL INTO N_ID_NEXT_MINI FROM DUAL;
        
        --METO EN LA TABLA TSR ID
        INSERT INTO ADYD_TSR (TSR_ID1, TSR_ID2) VALUES (V_TSR_ID1, V_TSR_ID2);
        --MINIATURA
        INSERT INTO ADYD_MINI (ID, PATH) VALUES (N_ID_NEXT_MINI, V_RUTA_MINI);
        --ARCHIVO
        INSERT INTO ADYD_FILES (ID, COLECCION_ID_FK, TSR_ID_FK, NOMBRE, TAMANHO, RUTA, ID_MINI_FK, ID_EXTRA_FK, ID_MODULO_FK) VALUES
        (ADYD_FILES_SEQ.NEXTVAL, N_COLECCION_ID, V_TSR_ID1, V_FILE, N_TAMANO, V_RUTA, N_ID_NEXT_MINI, NULL, N_ID_LAST_MODULO);
        COMMIT;
        V_MESSAGE := 'Archivo insertado';
        N_CODE := 0;
    END IF;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR('-20000', 'SIN DATOS');
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR('-20002', 'DATOS DUPLICADOS');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'ERROR FATAL');


END INSERTFILE;

FUNCTION GETCOLECCION(
    V_COLECCION IN ADYD_COLECCION.NOMBRE%TYPE
)  RETURN NUMBER IS 

N_ID NUMBER;

BEGIN
    SELECT COUNT(*) INTO N_ID FROM ADYD_COLECCION WHERE NOMBRE=V_COLECCION;
    IF N_ID >= 1 THEN
        SELECT ID INTO N_ID FROM ADYD_COLECCION WHERE NOMBRE=V_COLECCION;
        RETURN N_ID;
    ELSE 
        RETURN 0;
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR('-20000', 'ERROR GENERICO COMPROBAR DATOS');
    WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'ERROR FATAL');

END GETCOLECCION;

FUNCTION GETFILE(
    V_FILE IN ADYD_FILES.NOMBRE%TYPE
) RETURN NUMBER IS

N_ID NUMBER;

BEGIN
    N_ID := -1;
    
    SELECT ID INTO N_ID FROM ADYD_FILES WHERE NOMBRE LIKE '%V_FILE%';
    RETURN N_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN N_ID;
END GETFILE;



END ADYD_PKG;